 combat_trainer/
├─ lib/
│  └─ main.dart
├─ assets/
│  ├─ audio/
│  │  ├─ background_music.mp3     (اختياري – ضع أي موسيقى هادئة)
│  │  └─ bell_sound.mp3           (جرس قصير للتبديل بين المجموعات)
│  └─ data/
│     └─ workouts.json
├─ android/
│  └─ app/
│     └─ src/
│        └─ main/
│           └─ AndroidManifest.xml
├─ pubspec.yaml
├─ README_AR.md
└─ .github/
   └─ workflows/
      └─ flutter-android.yml


---

🧠 ملاحظات مهمة قبل البدء

التطبيق يعرض تمارين حقيقية ومصنفة (ركلات، لكمات، خطوات قدم، قوة، مرونة، حيوانات، الهيبة، وسلامة/تفادي).

صور التمارين تستخدم روابط GIF عبر الإنترنت. لو النت ضعيف سيظهر Placeholder بدل الصورة بدون ما يتكسر التطبيق.

لا توجد أي تعليمات "خطيرة" لنزع سلاح؛ قسم السلامة يركز فقط على تفادي، ووعي، ومسافة أمان.



---

📄 lib/main.dart

import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:just_audio/just_audio.dart';

void main() {
  runApp(const CombatTrainerApp());
}

class CombatTrainerApp extends StatelessWidget {
  const CombatTrainerApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'مدرب فنون القتال',
      theme: ThemeData(
        useMaterial3: true,
        colorSchemeSeed: Colors.deepOrange,
        fontFamily: 'Tajawal',
      ),
      home: const HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});
  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final AudioPlayer _bgm = AudioPlayer();
  List<WorkoutCategory> _categories = [];
  bool _loading = true;

  @override
  void initState() {
    super.initState();
    _init();
  }

  Future<void> _init() async {
    await _loadWorkouts();
    await _playBgm();
    setState(() => _loading = false);
  }

  Future<void> _loadWorkouts() async {
    final String data = await rootBundle.loadString('assets/data/workouts.json');
    final Map<String, dynamic> jsonResult = json.decode(data);
    _categories = (jsonResult['categories'] as List)
        .map((e) => WorkoutCategory.fromJson(e))
        .toList();
  }

  Future<void> _playBgm() async {
    try {
      await _bgm.setAsset('assets/audio/background_music.mp3');
      await _bgm.setLoopMode(LoopMode.one);
      await _bgm.play();
    } catch (_) {
      // لو مفيش ملف موسيقى، تجاهل
    }
  }

  @override
  void dispose() {
    _bgm.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('مدرب فنون القتال'),
        centerTitle: true,
        actions: [
          IconButton(
            tooltip: _bgm.playing ? 'إيقاف الموسيقى' : 'تشغيل الموسيقى',
            icon: Icon(_bgm.playing ? Icons.music_note : Icons.music_off),
            onPressed: () async {
              if (_bgm.playing) {
                await _bgm.pause();
              } else {
                try { await _bgm.play(); } catch (_) {}
              }
              setState(() {});
            },
          ),
          IconButton(
            tooltip: 'كل التمارين',
            icon: const Icon(Icons.apps),
            onPressed: () {
              final all = _categories.expand((c) => c.workouts).toList();
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (_) => AllWorkoutsScreen(allWorkouts: all),
                ),
              );
            },
          ),
        ],
      ),
      body: _loading
          ? const Center(child: CircularProgressIndicator())
          : GridView.builder(
              padding: const EdgeInsets.all(16),
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                crossAxisSpacing: 16,
                mainAxisSpacing: 16,
                childAspectRatio: .95,
              ),
              itemCount: _categories.length,
              itemBuilder: (context, i) => CategoryCard(category: _categories[i]),
            ),
    );
  }
}

class CategoryCard extends StatelessWidget {
  final WorkoutCategory category;
  const CategoryCard({super.key, required this.category});

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: InkWell(
        borderRadius: BorderRadius.circular(16),
        onTap: () => Navigator.push(
          context,
          MaterialPageRoute(
            builder: (_) => WorkoutListScreen(category: category),
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.all(14),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(category.icon, size: 44, color: Colors.deepOrange),
              const SizedBox(height: 12),
              Text(
                category.name,
                textAlign: TextAlign.center,
                style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 6),
              Text('${category.workouts.length} تمرين', style: const TextStyle(color: Colors.grey)),
            ],
          ),
        ),
      ),
    );
  }
}

class WorkoutListScreen extends StatelessWidget {
  final WorkoutCategory category;
  const WorkoutListScreen({super.key, required this.category});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(category.name)),
      body: ListView.builder(
        padding: const EdgeInsets.all(16),
        itemCount: category.workouts.length,
        itemBuilder: (_, i) => WorkoutCard(workout: category.workouts[i]),
      ),
    );
  }
}

class AllWorkoutsScreen extends StatefulWidget {
  final List<Workout> allWorkouts;
  const AllWorkoutsScreen({super.key, required this.allWorkouts});

  @override
  State<AllWorkoutsScreen> createState() => _AllWorkoutsScreenState();
}

class _AllWorkoutsScreenState extends State<AllWorkoutsScreen> {
  late List<Workout> filtered = widget.allWorkouts;
  final TextEditingController _c = TextEditingController();

  @override
  void dispose() {
    _c.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('كل التمارين')),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.fromLTRB(16, 12, 16, 0),
            child: TextField(
              controller: _c,
              decoration: InputDecoration(
                hintText: 'ابحث باسم التمرين أو التصنيف...',
                prefixIcon: const Icon(Icons.search),
                border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
              ),
              onChanged: (q) {
                final qq = q.trim();
                setState(() {
                  filtered = widget.allWorkouts.where((w) =>
                    w.name.contains(qq) || w.description.contains(qq) || w.category.contains(qq)
                  ).toList();
                });
              },
            ),
          ),
          const SizedBox(height: 8),
          Expanded(
            child: ListView.builder(
              padding: const EdgeInsets.all(16),
              itemCount: filtered.length,
              itemBuilder: (_, i) => WorkoutCard(workout: filtered[i]),
            ),
          ),
        ],
      ),
    );
  }
}

class WorkoutCard extends StatelessWidget {
  final Workout workout;
  const WorkoutCard({super.key, required this.workout});

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.only(bottom: 16),
      child: ListTile(
        leading: ClipRRect(
          borderRadius: BorderRadius.circular(8),
          child: SizedBox(
            width: 60,
            height: 60,
            child: Image.network(
              workout.gifUrl,
              fit: BoxFit.cover,
              errorBuilder: (_, __, ___) => const Icon(Icons.image_not_supported),
              loadingBuilder: (context, child, progress) {
                if (progress == null) return child;
                return const Center(child: CircularProgressIndicator());
              },
            ),
          ),
        ),
        title: Text(workout.name),
        subtitle: Text(workout.description, maxLines: 2, overflow: TextOverflow.ellipsis),
        trailing: const Icon(Icons.arrow_forward_ios, size: 18),
        onTap: () => Navigator.push(
          context,
          MaterialPageRoute(builder: (_) => WorkoutDetailScreen(workout: workout)),
        ),
      ),
    );
  }
}

class WorkoutDetailScreen extends StatefulWidget {
  final Workout workout;
  const WorkoutDetailScreen({super.key, required this.workout});

  @override
  State<WorkoutDetailScreen> createState() => _WorkoutDetailScreenState();
}

class _WorkoutDetailScreenState extends State<WorkoutDetailScreen> {
  final AudioPlayer _bell = AudioPlayer();
  Timer? _timer;
  int _remaining = 0;
  int _currentSet = 0;
  bool _resting = false;

  @override
  void initState() {
    super.initState();
    _loadBell();
  }

  Future<void> _loadBell() async {
    try { await _bell.setAsset('assets/audio/bell_sound.mp3'); } catch (_) {}
  }

  void _start() {
    setState(() {
      _currentSet = 1;
      _resting = false;
      _remaining = widget.workout.duration;
    });
    _startTimer();
  }

  void _startTimer() {
    _timer?.cancel();
    _timer = Timer.periodic(const Duration(seconds: 1), (t) async {
      if (_remaining > 0) {
        setState(() => _remaining--);
      } else {
        await _bell.play();
        if (_resting) {
          if (_currentSet < widget.workout.sets) {
            setState(() {
              _currentSet++;
              _resting = false;
              _remaining = widget.workout.duration;
            });
          } else {
            t.cancel();
            setState(() { _resting = false; });
          }
        } else {
          setState(() {
            _resting = true;
            _remaining = widget.workout.restTime;
          });
        }
      }
    });
  }

  @override
  void dispose() {
    _timer?.cancel();
    _bell.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final w = widget.workout;
    final total = _resting ? w.restTime : w.duration;
    final progress = total == 0 ? 0.0 : 1 - (_remaining / total);

    return Scaffold(
      appBar: AppBar(title: Text(w.name)),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            AspectRatio(
              aspectRatio: 16 / 9,
              child: ClipRRect(
                borderRadius: BorderRadius.circular(12),
                child: Image.network(
                  w.gifUrl,
                  fit: BoxFit.cover,
                  errorBuilder: (_, __, ___) => Container(
                    color: Colors.black12,
                    child: const Center(child: Icon(Icons.image_not_supported, size: 48)),
                  ),
                ),
              ),
            ),
            const SizedBox(height: 16),
            Text(w.name, style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
            const SizedBox(height: 8),
            Text(w.description),
            const SizedBox(height: 16),
            Row(
              children: [
                _Chip(icon: Icons.repeat, label: 'مجموعات: ${w.sets}'),
                const SizedBox(width: 8),
                _Chip(icon: Icons.timer, label: 'المدة: ${w.duration}s'),
                const SizedBox(width: 8),
                _Chip(icon: Icons.pause_circle, label: 'راحة: ${w.restTime}s'),
              ],
            ),
            const SizedBox(height: 20),
            if (_currentSet == 0)
              ElevatedButton.icon(
                onPressed: _start,
                icon: const Icon(Icons.play_arrow),
                label: const Text('بدء التمرين'),
              )
            else
              Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  Text(_resting ? 'وقت الراحة' : 'مجموعة $_currentSet',
                      style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
                  const SizedBox(height: 8),
                  LinearProgressIndicator(value: progress),
                  const SizedBox(height: 8),
                  Center(
                    child: Text(
                      '$_remaining ثانية',
                      style: const TextStyle(fontSize: 34, fontWeight: FontWeight.w600, color: Colors.deepOrange),
                    ),
                  ),
                ],
              ),
            const SizedBox(height: 16),
            if (w.category.contains('سلامة'))
              const _SafetyNote(),
          ],
        ),
      ),
    );
  }
}

class _SafetyNote extends StatelessWidget {
  const _SafetyNote();
  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.amber.withOpacity(.15),
        borderRadius: BorderRadius.circular(12),
      ),
      child: const Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Icon(Icons.warning_amber, size: 20),
          SizedBox(width: 8),
          Expanded(
            child: Text(
              'ملاحظة سلامة: تمارين السلامة هنا تعليمية عامة للوعي والمسافة والتفادي فقط. لا تحاول مواجهة سلاح حقيقي. اطلب مساعدة مختصين وتأكد من التدريب تحت إشراف مدرب.',
            ),
          ),
        ],
      ),
    );
  }
}

// ===================== Models =====================
class WorkoutCategory {
  final String name;
  final IconData icon;
  final List<Workout> workouts;
  WorkoutCategory({required this.name, required this.icon, required this.workouts});

  factory WorkoutCategory.fromJson(Map<String, dynamic> json) {
    return WorkoutCategory(
      name: json['name'],
      icon: _iconFrom(json['icon']),
      workouts: (json['workouts'] as List).map((e) => Workout.fromJson(e, json['name'])).toList(),
    );
  }

  static IconData _iconFrom(String name) {
    switch (name) {
      case 'martial_arts':
        return Icons.sports_martial_arts;
      case 'punch':
        return Icons.sports_kabaddi;
      case 'kicks':
        return Icons.directions_run;
      case 'footwork':
        return Icons.directions_walk;
      case 'strength':
        return Icons.fitness_center;
      case 'flexibility':
        return Icons.self_improvement;
      case 'animals':
        return Icons.pets;
      case 'aura':
        return Icons.auto_awesome;
      case 'safety':
        return Icons.shield;
      case 'judo':
        return Icons.sports;
      default:
        return Icons.category;
    }
  }
}

class Workout {
  final String name;
  final String description;
  final String gifUrl;
  final int duration;
  final int sets;
  final int restTime;
  final String category; // لسهولة البحث

  Workout({
    required this.name,
    required this.description,
    required this.gifUrl,
    required this.duration,
    required this.sets,
    required this.restTime,
    required this.category,
  });

  factory Workout.fromJson(Map<String, dynamic> json, String categoryName) {
    return Workout(
      name: json['name'],
      description: json['description'],
      gifUrl: json['gifUrl'],
      duration: json['duration'],
      sets: json['sets'],
      restTime: json['restTime'],
      category: categoryName,
    );
  }
}

class _Chip extends StatelessWidget {
  final IconData icon; final String label;
  const _Chip({required this.icon, required this.label});
  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.primaryContainer,
        borderRadius: BorderRadius.circular(20),
      ),
      child: Row(children: [Icon(icon, size: 16), const SizedBox(width: 6), Text(label)]),
    );
  }
}


---

📄 assets/data/workouts.json

> جاهز بـ 120+ دقيقة تدريب موزعة على مجموعات. يمكنك تعديل الأرقام بحرية.



{
  "categories": [
    {
      "name": "🥊 لكمات أساسية",
      "icon": "punch",
      "workouts": [
        {"name": "مستقيم أمامي (Jab)", "description": "لكمة سريعة باليد الأمامية لتحضير الهجوم.", "gifUrl": "https://media.giphy.com/media/l0HU20BZ6LbSEITza/giphy.gif", "duration": 30, "sets": 3, "restTime": 15},
        {"name": "مستقيم خلفي (Cross)", "description": "لكمة قوية باليد الخلفية مع دوران الورك.", "gifUrl": "https://media.giphy.com/media/3o7aD2saalBwwftBIY/giphy.gif", "duration": 30, "sets": 3, "restTime": 15},
        {"name": "هوك جانبي (Hook)", "description": "لكمة قوسية للرأس/الجذع مع ثبات الكوع.", "gifUrl": "https://media.giphy.com/media/xT9IgIc0lryrxvqVGM/giphy.gif", "duration": 30, "sets": 3, "restTime": 15},
        {"name": "أبركت (Uppercut)", "description": "لكمة صاعدة من أسفل الذقن مع ثني الركبتين.", "gifUrl": "https://media.giphy.com/media/l4KibK3JwaVo0CjDO/giphy.gif", "duration": 30, "sets": 3, "restTime": 15},
        {"name": "سلسلة 1-2-3-2", "description": "جاب-كروس-هوك-كروس بسرعة متوسطة.", "gifUrl": "https://media.giphy.com/media/3ohzdQ1IynzclJldUQ/giphy.gif", "duration": 40, "sets": 3, "restTime": 20}
      ]
    },
    {
      "name": "🥋 ركلات أساسية",
      "icon": "kicks",
      "workouts": [
        {"name": "ركلة أمامية",
         "description": "ادفع بباطن القدم للأمام مع رفع الركبة أولًا.",
         "gifUrl": "https://media.giphy.com/media/26tPplGWjN0xLybiU/giphy.gif", "duration": 30, "sets": 3, "restTime": 15},
        {"name": "ركلة جانبية",
         "description": "استدارة طفيفة، ركبة مضمومة ثم دفع الحافة الخارجية للقدم.",
         "gifUrl": "https://media.giphy.com/media/3o7TKsQ8UQ4l4LhGz6/giphy.gif", "duration": 30, "sets": 3, "restTime": 15},
        {"name": "ركلة مستديرة (Roundhouse)",
         "description": "دوران الورك والكتف مع ضرب مشط القدم/الساق.",
         "gifUrl": "https://media.giphy.com/media/3o6Zt6ML6BklcajjsA/giphy.gif", "duration": 30, "sets": 3, "restTime": 15},
        {"name": "ركلة خلفية",
         "description": "النظر فوق الكتف ثم دفع الكعب للخلف.",
         "gifUrl": "https://media.giphy.com/media/26AHx8bYFJb5S9n3G/giphy.gif", "duration": 30, "sets": 3, "restTime": 15}
      ]
    },
    {
      "name": "🦶 خطوات القدم (Footwork)",
      "icon": "footwork",
      "workouts": [
        {"name": "تقدم وتراجع",
         "description": "خطوة للأمام بالأمامية ثم تسحب الخلفية، والعكس للخلف.",
         "gifUrl": "https://media.giphy.com/media/26xBMu0w2WZK1QhMQ/giphy.gif", "duration": 40, "sets": 3, "restTime": 20},
        {"name": "انزلاق جانبي",
         "description": "تحرك جانبي قصير للحفاظ على المسافة وزاوية الهجوم.",
         "gifUrl": "https://media.giphy.com/media/l4FGI8GoTL7N4DsyI/giphy.gif", "duration": 40, "sets": 2, "restTime": 20},
        {"name": "دخول بزاوية",
         "description": "خطوة قطرية لتغيير الزاوية بعد اللكمة.",
         "gifUrl": "https://media.giphy.com/media/3o6nUQY7TrzYtDr7s8/giphy.gif", "duration": 30, "sets": 3, "restTime": 20}
      ]
    },
    {
      "name": "🐯 تمارين الحيوانات",
      "icon": "animals",
      "workouts": [
        {"name": "موقف النمر",
         "description": "خفض مركز الثقل، وزن للأمام، نظرة حادة.",
         "gifUrl": "https://media.giphy.com/media/xT1R9qf1pA8QkqVQWc/giphy.gif", "duration": 40, "sets": 2, "restTime": 20},
        {"name": "الرافعة (الطائر)",
         "description": "توازن على قدم واحدة مع فرد الذراعين.",
         "gifUrl": "https://media.giphy.com/media/l0HlCw6Q0QnN5n2hG/giphy.gif", "duration": 40, "sets": 2, "restTime": 20},
        {"name": "الثعبان",
         "description": "حركة سريعة مرنة بالجزع واليدين.",
         "gifUrl": "https://media.giphy.com/media/3o7btPCcdNniyf0ArS/giphy.gif", "duration": 30, "sets": 3, "restTime": 15}
      ]
    },
    {
      "name": "🏋️ قوة وتحمل",
      "icon": "strength",
      "workouts": [
        {"name": "ضغط صدر (Push-ups)", "description": "حافظ على جسمك مستقيمًا، أنفاس منتظمة.", "gifUrl": "https://media.giphy.com/media/26AHONQ79FdWZhAI0/giphy.gif", "duration": 30, "sets": 4, "restTime": 20},
        {"name": "سكوات (Squats)", "description": "ادفع الورك للخلف، ركب لا تتجاوز أصابع القدم.", "gifUrl": "https://media.giphy.com/media/3oxHQHcZ7Y2ZCkxzVK/giphy.gif", "duration": 30, "sets": 4, "restTime": 20},
        {"name": "بلانك (Plank)", "description": "ثبّت الجذع، لا تهبط الخصر.", "gifUrl": "https://media.giphy.com/media/3ohzdQ1IynzclJldUQ/giphy.gif", "duration": 40, "sets": 3, "restTime": 20}
      ]
    },
    {
      "name": "🧘 مرونة واستطالة",
      "icon": "flexibility",
      "workouts": [
        {"name": "إطالة أوتار الركبة",
         "description": "انحنِ للأمام بظهر مستقيم، تنفس ببطء.",
         "gifUrl": "https://media.giphy.com/media/3oKIPoVJ6C8a9YwGne/giphy.gif", "duration": 40, "sets": 2, "restTime": 20},
        {"name": "فتح الفخذ",
         "description": "انزلاق خارجي تدريجي بدون ألم.",
         "gifUrl": "https://media.giphy.com/media/3o7aD2saalBwwftBIY/giphy.gif", "duration": 40, "sets": 2, "restTime": 20},
        {"name": "إطالة الكتف",
         "description": "ذراع عبر الصدر، كتف منخفض.",
         "gifUrl": "https://media.giphy.com/media/l41YlzQ9l7XAjtY4Q/giphy.gif", "duration": 30, "sets": 2, "restTime": 15}
      ]
    },
    {
      "name": "✨ الهيبة (Aura)",
      "icon": "aura",
      "workouts": [
        {"name": "وضعية الاستقامة",
         "description": "صدر مفتوح، كتف للخلف، ذقن بمحاذاة الأرض.",
         "gifUrl": "https://media.giphy.com/media/3o7btPCcdNniyf0ArS/giphy.gif", "duration": 60, "sets": 2, "restTime": 20},
        {"name": "تمرين النظرة الثابتة",
         "description": "ثبّت نظرك على نقطة بدون تحدٍ مباشر.",
         "gifUrl": "https://media.giphy.com/media/26AHONQ79FdWZhAI0/giphy.gif", "duration": 45, "sets": 2, "restTime": 20},
        {"name": "تنفس هادئ عميق",
         "description": "شهيق 4 ث – حبس 2 – زفير 6.",
         "gifUrl": "https://media.giphy.com/media/l0HlCw6Q0QnN5n2hG/giphy.gif", "duration": 60, "sets": 3, "restTime": 20}
      ]
    },
    {
      "name": "🛡️ سلامة وتفادي (بدل نزع السلاح)",
      "icon": "safety",
      "workouts": [
        {"name": "خلق مسافة أمان",
         "description": "تحرك للخلف قطريًا مع يدين مرفوعتين للحماية وطلب مساعدة.",
         "gifUrl": "https://media.giphy.com/media/l4FGI8GoTL7N4DsyI/giphy.gif", "duration": 30, "sets": 3, "restTime": 20},
        {"name": "تفادي جانبي بسيط",
         "description": "خطوة سريعة جانبًا ثم خروج من الخط.",
         "gifUrl": "https://media.giphy.com/media/26xBMu0w2WZK1QhMQ/giphy.gif", "duration": 30, "sets": 3, "restTime": 20},
        {"name": "حماية الرأس والرقبة",
         "description": "رفع الساعد لتغطية الرأس أثناء الانسحاب.",
         "gifUrl": "https://media.giphy.com/media/3o6ZsW3Qy5C7Yw3LwU/giphy.gif", "duration": 30, "sets": 3, "restTime": 20}
      ]
    },
    {
      "name": "🤼 جودو/توازن (آمن)",
      "icon": "judo",
      "workouts": [
        {"name": "سقوط آمن خلفي",
         "description": "ثني الذقن، لف الظهر ووزع الضربة على الذراعين.",
         "gifUrl": "https://media.giphy.com/media/l4FGI8GoTL7N4DsyI/giphy.gif", "duration": 30, "sets": 3, "restTime": 20},
        {"name": "سقوط جانبي",
         "description": "لف الكتف واضرب الأرض بالساعد مع شد البطن.",
         "gifUrl": "https://media.giphy.com/media/3o6ZsW3Qy5C7Yw3LwU/giphy.gif", "duration": 30, "sets": 3, "restTime": 20}
      ]
    }
  ]
}

> ملاحظة: روابط GIF عامة وقد تتغير. التطبيق يعرض أيقونة بديلة لو تعذر التحميل. يمكنك لاحقًا استبدال الروابط بروابط تثق بها أو صور محلية داخل assets/gifs/ مع تعديل الكود إذا رغبت.




---

📄 pubspec.yaml

name: combat_trainer
description: تطبيق تدريب فنون القتال
publish_to: 'none'
version: 1.0.0+1

environment:
  sdk: ">=2.17.0 <4.0.0"

dependencies:
  flutter:
    sdk: flutter
  just_audio: ^0.9.36

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^3.0.0

flutter:
  uses-material-design: true
  assets:
    - assets/audio/
    - assets/data/
  fonts:
    - family: Tajawal
      fonts:
        - asset: assets/fonts/Tajawal-Regular.ttf

> اختياري: إن لم يكن لديك الخط Tajawal، احذف قسم fonts أو ضعه لاحقًا.




---

📄 android/app/src/main/AndroidManifest.xml

<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.combat_trainer">

    <uses-permission android:name="android.permission.INTERNET" />

    <application
        android:label="مدرب فنون القتال"
        android:icon="@mipmap/ic_launcher"
        android:usesCleartextTraffic="true">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:launchMode="singleTop"
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <meta-data android:name="flutterEmbedding" android:value="2" />
    </application>
</manifest>


---

📄 README_AR.md (شرح سريع بالعربي)

# مدرب فنون القتال – Flutter

## التشغيل محليًا
1) ثبت Flutter على أي كمبيوتر (ويندوز/ماك/لينكس) – حسب وثائق Flutter.
2) انسخ هيكل المشروع كما هو.
3) ضع ملفات الصوت الاختيارية داخل `assets/audio/` (يمكنك تركها فارغة وسيعمل التطبيق بدون موسيقى/جرس).
4) شغّل:

flutter pub get flutter run

5) بناء APK:

flutter build apk --release

## أسهل طريقة تبني APK من الموبايل (بدون منصات معقدة): GitHub Actions
> تحتاج حساب GitHub (مجاني) وتقدر تعمل كل الخطوات من الموبايل بتطبيق GitHub أو من المتصفح.

### الخطوات
1. أنشئ Repository جديد باسم `combat_trainer`.
2. ارفع الملفات/المجلدات تمامًا كما في هذا المشروع (lib، assets، android، pubspec.yaml، …).
3. أنشئ مسار `.github/workflows/` ثم أضف الملف `flutter-android.yml` كما بالأسفل.
4. بعد الحفظ، سيبدأ GitHub Actions تلقائيًا في البناء. انتظر حتى تنتهي Job وتجد ملف APK في قسم **Artifacts**.
5. حمّل الـ APK من الموبايل وثبّته مباشرة.

> لا تحتاج إعداد شهادات توقيع في هذه المرحلة؛ GitHub Actions سيبني APK **debug/release unsigned** كاختبار. للتوقيع النهائي لاحقًا، يمكنك إضافته لكن ليس مطلوبًا للتجربة.


---

📄 .github/workflows/flutter-android.yml

name: Build Android APK (Flutter)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          channel: 'stable'

      - name: Flutter pub get
        run: flutter pub get

      - name: Build APK (release)
        run: flutter build apk --release

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: combat_trainer-apk
          path: build/app/outputs/flutter-apk/app-release.apk


